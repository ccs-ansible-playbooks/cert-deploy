- name: "Setup Cert Deployment Scheduled Task on ansible controller"
  vars_files:
    - "vars/cert_locations.yml"

  vars:
    ansible_connection: "local"
    task_user: "ansible"
    smtp_server: "internalrelay.centennialchristian.ca"
    smtp_sender: "letsencrypt-alert@nisgaa.bc.ca"
    smtp_recipient: "it-dept@nisgaa.bc.ca"
    sudo_group: "{{ 'wheel' if (ansible_os_family is search('([Rr]ed|[Cc]ent|[Ss]ang|[Xx]cp)')) else 'sudo' }}"

  hosts: "localhost"

  gather_facts: true

  tasks:
    # - name: "Install Email client for alerting"
    #   ansible.builtin.package:
    #     name:
    #       - "msmtp"
    #       - "python3-cryptography"
    #
    # - name: "Configure Email client"
    #   when: task_user is defined
    #   ansible.builtin.copy:
    #     dest: "/etc/msmtprc"
    #     mode: "0644"
    #     group: "root"
    #     owner: "root"
    #     content: |
    #       account       internalrelay
    #       auth          off
    #       from          {{ smtp_sender }}
    #       host          {{ smtp_server }}
    #       port          25
    #       tls           off
    #       timeout       5
    #
    # - name: "Create SystemD Service file"
    #   ansible.builtin.copy:
    #     content: |
    #       [Unit]
    #       Description=Fetch new certificate(s) then deploy
    #       After=network.target
    #
    #       [Service]
    #       Type=oneshot
    #       ExecStartPre=+/usr/bin/mkdir -p "{{ cert_dir }}"
    #       ExecStartPre+/usr/bin/chown -R {{ task_user | default("root") }} "{{ cert_dir }}"
    #       ExecStartPre=+/usr/bin/setfacl -R -d -m "u:{{ task_user | default("root") }}:rwx" "{{ cert_dir }}"
    #       ExecStartPre=+/usr/bin/setfacl -R -m "u:{{ task_user | default("root") }}:rwx" "{{ cert_dir }}"
    #       ExecStart={{ playbook_dir }}/cert-deploy-run.bash
    #       User={{ task_user | default("root") }}
    #
    #       [Install]
    #       WantedBy=multi-user.target
    #     dest: "/etc/systemd/system/cert-deploy.service"
    #     owner: "root"
    #     group: "root"
    #     mode: "0755"
    #
    # - name: "Create SystemD Timer file"
    #   ansible.builtin.copy:
    #     content: |
    #       [Unit]
    #       Description=Fetch new certificate(s) then deploy
    #
    #       [Timer]
    #       OnCalendar=*-*-* 04:30:00
    #
    #       [Install]
    #       WantedBy=timers.target
    #     dest: "/etc/systemd/system/cert-deploy.timer"
    #     owner: "root"
    #     group: "root"
    #     mode: "0755"
    #
    # - name: "SystemD Reload"
    #   ansible.builtin.systemd:
    #     daemon_reload: true
    #
    # - name: "SystemD Enable Timer"
    #   ansible.builtin.systemd:
    #     enabled: true
    #     name: "cert-deploy.timer"
    #     state: "started"

    - name: "Create ansible group"
      ansible.builtin.group:
        name: "ansible"
        state: "present"

    - name: "Create certdeploy group"
      ansible.builtin.group:
        name: "certdeploy"
        state: "present"

    - name: "Create local ansible user"
      ansible.builtin.user:
        create_home: true
        group: "ansible"
        groups:
          - "certdeploy"
        name: "ansible"
        shell: "/bin/bash"

    - name: "Install python3 cryptography"
      ansible.builtin.package:
        name:
          - "acl"
          - "python3-cryptography"
        state: "present"

    - name: "Create live directory"
      ansible.builtin.file:
        group: "certdeploy"
        mode: "0770"
        owner: "root"
        path: "{{ cert_dir }}/live"
        state: "directory"

    - name: "Create archive directory"
      ansible.builtin.file:
        group: "certdeploy"
        mode: "0760"
        owner: "root"
        path: "{{ archive_dir }}"
        state: "directory"

    - name: "Grant access certs directory to sudo users via ACLs"
      ansible.posix.acl:
        default: false
        entity: "{{ sudo_group }}"
        etype: "group"
        path: "{{ cert_dir }}"
        permissions: "rw"
        recursive: true
        state: "present"

    - name: "Grant traverse access to certs dir and sub for sudo users via ACLs"
      ansible.builtin.shell:
        cmd: |
          /usr/bin/find "{{ cert_dir }}" -type d -exec setfacl -m "g:{{ sudo_group }}:rwx" {} \;

    - name: "Grant traverse access to certs dir and sub for certdeploy group via ACLs"
      ansible.builtin.shell:
        cmd: |
          /usr/bin/find "{{ cert_dir }}" -type d -exec setfacl -m "g:certdeploy:rwx" {} \;

    - name: "Grant access certs directory to certdeploy group via ACLs"
      ansible.posix.acl:
        default: false
        entity: "certdeploy"
        etype: "group"
        path: "{{ cert_dir }}"
        permissions: "rw"
        recursive: true
        state: "present"

    - name: "Grant default permissions cert directory to sudo users via ACLs"
      ansible.posix.acl:
        default: true
        entity: "{{ sudo_group }}"
        etype: "group"
        path: "{{ cert_dir }}"
        permissions: "rwX"
        recursive: true
        state: "present"

    - name: "Grant default permissions certs directory to certdeploy group via ACLs"
      ansible.posix.acl:
        default: true
        entity: "certdeploy"
        etype: "group"
        path: "{{ cert_dir }}"
        permissions: "rwX"
        recursive: true
        state: "present"

    - name: "Install required collections"
      ansible.builtin.script:
        cmd: |
          ansible-galaxy install -r "{{ playbook_dir }}/requirements.yml"
